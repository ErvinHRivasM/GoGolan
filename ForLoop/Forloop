package main
import ("fmt")

/*
  for statement1; statement2; statement3 {
   // code to be executed for each iteration
  }
  - statement1 Initializes the loop counter value.
  - statement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.
  - statement3 Increases the loop counter value.
*/

func main() {

  for i:=0; i < 5; i++ {
    fmt.Println(i)
  }

  This example skips the value of 5 รณ 7.
  for i:=0; i < 10; i++ {
    if (i == 7 || i== 5) {
      continue
    }
    fmt.Println(i)
  }

  //The break statement is used to break/terminate the loop execution.
  for i:=0; i < 5; i++ {
    if i == 3 {
      break
    }
   fmt.Println(i)
  }

  //Nested for Loops
  adj := [2]string{"big", "tasty"}
  fruits := [3]string{"apple", "orange", "banana"}
  for i:=0; i < len(adj); i++ {
    for j:=0; j < len(fruits); j++ {
      fmt.Println(adj[i],fruits[j])
    }
  }

  //The range keyword is used to more easily iterate over an array, slice or map. It returns both the index and the value.
  fruits := [3]string{"apple", "orange", "banana"}
  for idx, val := range fruits {
     fmt.Printf("%v\t%v\n", idx, val)
  }

  //Here, we want to omit the indexes (idx stores the index, val stores the value).
  fruits := [3]string{"apple", "orange", "banana"}
  for _, val := range fruits {
     fmt.Printf("%v\n", val)
  }

 fruits := [3]string{"apple", "orange", "banana"}

  for idx, _ := range fruits {
     fmt.Printf("%v\n", idx)
  }



}

