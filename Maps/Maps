package main
import ("fmt")

/*
  Maps are used to store data values in key:value pairs.
  Each element in a map is a key:value pair.
  Sintaxis:::
  var a = map[KeyType]ValueType{key1:value1, key2:value2,...}
  b := map[KeyType]ValueType{key1:value1, key2:value2,...}
*/


func main() {
  var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964"}
  b := map[string]int{"Oslo": 1, "Bergen": 2, "Trondheim": 3, "Stavanger": 4}

  fmt.Printf("a\t%v\n", a)
  fmt.Printf("b\t%v\n", b)

  /*
  Creating Maps Using Using make()Function:
  var a = make(map[KeyType]ValueType)
  b := make(map[KeyType]ValueType)
  */

  var a = make(map[string]string) // The map is empty now
  a["brand"] = "Ford"
  a["model"] = "Mustang"
  a["year"] = "1964"
                                 // a is no longer empty
  b := make(map[string]int)
  b["Oslo"] = 1
  b["Bergen"] = 2
  b["Trondheim"] = 3
  b["Stavanger"] = 4

  fmt.Printf("a\t%v\n", a)
  fmt.Printf("b\t%v\n", b)

  /*
  Creating an Empty Map
  There are two ways to create an empty map. One is by using the make()function and the other is by using the following syntax.
  var a map[KeyType]ValueType
  */

  var a = make(map[string]string)
  var b map[string]string

  fmt.Println(a == nil)
  fmt.Println(b == nil)


  /*
  Allowed Key Types
  The map key can be of any data type for which the equality operator (==) is defined. These include.
  Booleans
  Numbers
  Strings
  Arrays
  Pointers
  Structs
  Interfaces (as long as the dynamic type supports equality)
  Invalid key types are:

  Slices
  Maps
  Functions
  These types are invalid because the equality operator (==) is not defined for them.

  Allowed Value Types
  The map values can be any type.

  Accessing Map Elements
  You can access map elements by:

  Syntax
  value = map_name[key]
  */

  var a = make(map[string]string)
  a["brand"] = "Ford"
  a["model"] = "Mustang"
  a["year"] = "1964"

  fmt.Printf(a["brand"])

  a["year"] = "1970" // Updating an element
  a["color"] = "red" // Adding an element



  /*
  Remove Element from Map
  Removing elements is done using the delete() function.
  Syntax
  delete(map_name, key)
  */

  var ab = make(map[string]string)
  ab["brand"] = "Ford"
  ab["model"] = "Mustang"
  ab["year"] = "1964"

  fmt.Println(ab)

  delete(ab,"year")

  fmt.Println(ab)


  //Check For Specific Elements in a Map
  //You can check if a certain key exists in a map using.
  //Sintaxis:val, ok :=map_name[key]
  var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964", "day":""}

  val1, ok1 := a["brand"] // Checking for existing key and its value
  val2, ok2 := a["color"] // Checking for non-existing key and its value
  val3, ok3 := a["day"]   // Checking for existing key and its value
  _, ok4 := a["model"]    // Only checking for existing key and not its value

  fmt.Println(val1, ok1)
  fmt.Println(val2, ok2)
  fmt.Println(val3, ok3)
  fmt.Println(ok4)

  /*
  Maps Are References
  Maps are references to hash tables.
  If two map variables refer to the same hash table, changing the content of one variable affect the content of the other.
  */
  var a = map[string]string{"brand": "Ford", "model": "Mustang", "year": "1964"}
  b := a

  fmt.Println(a)
  fmt.Println(b)

  b["Year"] = "1970"
  fmt.Println("After change to b:")

  fmt.Println(a)
  fmt.Println(b)

  /*
  Iterating Over Maps
  You can use range to iterate over maps.
  This example shows how to iterate over the elements in a map. Note the order of the elements in the output.
  */

  a := map[string]int{"one": 1, "two": 2, "three": 3, "four": 4}

  for k, v := range a {
    fmt.Printf("%v : %v, ", k, v)
  }
  

  /*
  Iterate Over Maps in a Specific Order
  Maps are unordered data structures. If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order.
  */
  a := map[string]int{"one": 1, "two": 2, "three": 3, "four": 4}

  var b = []string             // defining the order
  b = append(b, "one", "two", "three", "four")

  for k, v := range a {        // loop with no order
    fmt.Printf("%v : %v, ", k, v)
  }

  fmt.Println()

  for _, element := range b {  // loop with the defined order
    fmt.Printf("%v : %v, ", element, a[element])
  }



}

