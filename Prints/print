package main
import ("fmt")

  /*
  Go has three functions to output text:
  Print()
  Println()
  Printf()
  */

func main() {

  var i,j string = "Hello","World"
  fmt.Print(i, "\n")
  fmt.Print(j, "\n")

  // The Println() function is similar to Print() with the difference that a whitespace is added between the arguments, and a newline is added at the end.
  fmt.Println(i,j)


  // The Printf() function first formats its argument based on the given formatting verb and then prints them.
  // %v is used to print the value of the arguments
  // %#v  Prints the value in Go-syntax format
  // %T is used to print the type of the arguments
  // %%  Prints the % sign

  fmt.Printf("i has value: %v and type: %T\n", i, i)
  fmt.Printf("j has value: %v and type: %T", j, j)

}

/*
Others Integer formats
%b  Base 2
%d  Base 10
%+d Base 10 and always show sign
%o  Base 8
%O  Base 8, with leading 0o
%x  Base 16, lowercase
%X  Base 16, uppercase
%#x Base 16, with leading 0x
%4d Pad with spaces (width 4, right justified)
%-4d  Pad with spaces (width 4, left justified)
%04d  Pad with zeroes (width 4)

StringFormats
%s  Prints the value as plain string
%q  Prints the value as a double-quoted string
%8s Prints the value as plain string (width 8, right justified)
%-8s  Prints the value as plain string (width 8, left justified)
%x  Prints the value as hex dump of byte values
% x Prints the value as hex dump with spaces


Boolean formats
%t  Value of the boolean operator in true or false format (same as using %v)

Floats formats verb
%e  Scientific notation with 'e' as exponent
%f  Decimal point, no exponent
%.2f  Default width, precision 2
%6.2f Width 6, precision 2
%g  Exponent as needed, only necessary digits

*/